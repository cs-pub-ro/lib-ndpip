TODO: Make sure tcp_send errs on input pbufs that are large than MSS. Also provide an API to probe the MSS.
TODO: Eliminate race conditions between RX and TX threads. For example over rto_timer. This could be done by moving the TX and RX logic on the same thread with a separate application thread that handles socket control and enqueues and dequeues data segments. The worker application thread might be the easiest way to solve concurrency issues on TCP sockets.
TODO: On the RX side when receiving smaller that MSS segments move them to a malloc-based allocator and push them to the application.
TODO: Presently packets are delivered to the received socket once per burst, this has the greatest performance gain when there is only one CONNECTED socket and worst when packets from "burst" sockets are received in one burst. A solution would be to deliver packets to the socket once a pad buffer is full, say 64 packets, or on the expiration of a timer. The performance increase is due to the fact that ndpip_ring_push_one is very slow, while ndpip_ring_push is faster.
